<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mm32f527x_e9p.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mm32f527x_e9p.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Jan 10 18:46:34 2023
<BR><P>
<H3>Maximum Stack Usage =       1088 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ips114_init &rArr; spi_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>
 <LI><a href="#[d]">BKP_TAMPER_IRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[43]">COMP_IRQHandler</a>
 <LI><a href="#[8]">DebugMon_Handler</a>
 <LI><a href="#[d5]">Default_Handler</a>
 <LI><a href="#[41]">ENET_IRQHandler</a>
 <LI><a href="#[42]">ENET_WKUP_IRQHandler</a>
 <LI><a href="#[f]">FLASH_IRQHandler</a>
 <LI><a href="#[1f]">FlexCAN1_IRQHandler</a>
 <LI><a href="#[44]">FlexCAN2_IRQHandler</a>
 <LI><a href="#[28]">I2C1_IRQHandler</a>
 <LI><a href="#[29]">I2C2_IRQHandler</a>
 <LI><a href="#[4c]">LPTIM_IRQHandler</a>
 <LI><a href="#[4d]">LPUART_IRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[c]">PVD_IRQHandler</a>
 <LI><a href="#[9]">PendSV_Handler</a>
 <LI><a href="#[4b]">QSPI_IRQHandler</a>
 <LI><a href="#[10]">RCC_CRS_IRQHandler</a>
 <LI><a href="#[30]">RTC_ALR_IRQHandler</a>
 <LI><a href="#[e]">RTC_IRQHandler</a>
 <LI><a href="#[2a]">SPI1_IRQHandler</a>
 <LI><a href="#[2b]">SPI2_IRQHandler</a>
 <LI><a href="#[37]">SPI3_IRQHandler</a>
 <LI><a href="#[7]">SVC_Handler</a>
 <LI><a href="#[6]">SecureFault_Handler</a>
 <LI><a href="#[a]">SysTick_Handler</a>
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[32]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[35]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[34]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[45]">USB_FS_IRQHandler</a>
 <LI><a href="#[31]">USB_WKUP_IRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[b]">WWDG_IWDG_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[72]">gpio_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">debug_assert_handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[d]">BKP_TAMPER_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[43]">COMP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[16]">DMA1_CH1_IRQHandler</a> from isr.o(.text.DMA1_CH1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[17]">DMA1_CH2_IRQHandler</a> from isr.o(.text.DMA1_CH2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[18]">DMA1_CH3_IRQHandler</a> from isr.o(.text.DMA1_CH3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[19]">DMA1_CH4_IRQHandler</a> from isr.o(.text.DMA1_CH4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1a]">DMA1_CH5_IRQHandler</a> from isr.o(.text.DMA1_CH5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1b]">DMA1_CH6_IRQHandler</a> from isr.o(.text.DMA1_CH6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1c]">DMA1_CH7_IRQHandler</a> from isr.o(.text.DMA1_CH7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1e]">DMA1_CH8_IRQHandler</a> from isr.o(.text.DMA1_CH8_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3c]">DMA2_CH1_IRQHandler</a> from isr.o(.text.DMA2_CH1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3d]">DMA2_CH2_IRQHandler</a> from isr.o(.text.DMA2_CH2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3e]">DMA2_CH3_IRQHandler</a> from isr.o(.text.DMA2_CH3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3f]">DMA2_CH4_IRQHandler</a> from isr.o(.text.DMA2_CH4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[40]">DMA2_CH5_IRQHandler</a> from isr.o(.text.DMA2_CH5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[46]">DMA2_CH6_IRQHandler</a> from isr.o(.text.DMA2_CH6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[47]">DMA2_CH7_IRQHandler</a> from isr.o(.text.DMA2_CH7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[48]">DMA2_CH8_IRQHandler</a> from isr.o(.text.DMA2_CH8_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[41]">ENET_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[42]">ENET_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from isr.o(.text.EXTI0_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2f]">EXTI15_10_IRQHandler</a> from isr.o(.text.EXTI15_10_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from isr.o(.text.EXTI1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from isr.o(.text.EXTI2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from isr.o(.text.EXTI3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from isr.o(.text.EXTI4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a> from isr.o(.text.EXTI9_5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1f]">FlexCAN1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[44]">FlexCAN2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[28]">I2C1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[29]">I2C2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4c]">LPTIM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4d]">LPUART_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4b]">QSPI_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[10]">RCC_CRS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[30]">RTC_ALR_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2b]">SPI2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[37]">SPI3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[22]">TIM1_UP_IRQHandler</a> from isr.o(.text.TIM1_UP_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from isr.o(.text.TIM2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from isr.o(.text.TIM3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[27]">TIM4_IRQHandler</a> from isr.o(.text.TIM4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[36]">TIM5_IRQHandler</a> from isr.o(.text.TIM5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3a]">TIM6_IRQHandler</a> from isr.o(.text.TIM6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3b]">TIM7_IRQHandler</a> from isr.o(.text.TIM7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[32]">TIM8_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[35]">TIM8_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[34]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[33]">TIM8_UP_IRQHandler</a> from isr.o(.text.TIM8_UP_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2c]">UART1_IRQHandler</a> from isr.o(.text.UART1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2d]">UART2_IRQHandler</a> from isr.o(.text.UART2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2e]">UART3_IRQHandler</a> from isr.o(.text.UART3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[38]">UART4_IRQHandler</a> from isr.o(.text.UART4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[39]">UART5_IRQHandler</a> from isr.o(.text.UART5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[49]">UART6_IRQHandler</a> from isr.o(.text.UART6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4a]">UART7_IRQHandler</a> from isr.o(.text.UART7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[45]">USB_FS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[31]">USB_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[b]">WWDG_IWDG_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[52]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4f]">debug_uart_str_output</a> from zf_common_debug.o(.text.debug_uart_str_output) referenced 2 times from zf_common_debug.o(.text.debug_init)
 <LI><a href="#[51]">ips114_clear</a> from zf_device_ips114.o(.text.ips114_clear) referenced 2 times from zf_device_ips114.o(.text.ips114_debug_init)
 <LI><a href="#[50]">ips114_show_string</a> from zf_device_ips114.o(.text.ips114_show_string) referenced 2 times from zf_device_ips114.o(.text.ips114_debug_init)
 <LI><a href="#[4e]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[53]">type_default_callback</a> from zf_device_type.o(.text.type_default_callback) referenced from zf_device_type.o(.data.camera_dma_handler)
 <LI><a href="#[53]">type_default_callback</a> from zf_device_type.o(.text.type_default_callback) referenced from zf_device_type.o(.data.camera_uart_handler)
 <LI><a href="#[53]">type_default_callback</a> from zf_device_type.o(.text.type_default_callback) referenced from zf_device_type.o(.data.camera_vsync_handler)
 <LI><a href="#[53]">type_default_callback</a> from zf_device_type.o(.text.type_default_callback) referenced from zf_device_type.o(.data.wireless_module_uart_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[54]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[cf]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[67]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; SystemInit &rArr; clock_init &rArr; clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BKP_TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>COMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>ENET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FlexCAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FlexCAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>QSPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC_ALR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_protective_handler
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_uint
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[94]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[dc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[dd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[de]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>DMA1_CH1_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH1_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_CH2_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH2_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_CH3_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH3_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_CH4_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH4_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_CH5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH5_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_CH6_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH6_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_CH7_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH7_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_CH8_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH8_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_CH1_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH1_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_CH2_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH2_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_CH3_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH3_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_CH4_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH4_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_CH5_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH5_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_CH6_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH6_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_CH7_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH7_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_CH8_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH8_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA_ClearChannelInterruptStatus</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, hal_dma.o(.text.DMA_ClearChannelInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ClearChannelInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH8_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH7_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH8_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>DMA_GetChannelInterruptStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_dma.o(.text.DMA_GetChannelInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetChannelInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH8_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH7_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH8_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, isr.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetLineStatus
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, isr.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetLineStatus
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI_ClearLineStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_exti.o(.text.EXTI_ClearLineStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_ClearLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>EXTI_GetLineStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_exti.o(.text.EXTI_GetLineStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI_GetLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>EasyKeyHandler</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, easy_key.o(.text.EasyKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EasyKeyHandler &rArr; SyncValue &rArr; gpio_get_level
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiClickCallback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressCallback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>EasyKeyInit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, easy_key.o(.text.EasyKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EasyKeyInit &rArr; gpio_init &rArr;  debug_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>GPIO_Init</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, hal_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[86]"></a>GPIO_PinAFConf</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, hal_gpio.o(.text.GPIO_PinAFConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[70]"></a>HoldCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, easy_key.o(.text.HoldCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HoldCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyKeyHandler
</UL>

<P><STRONG><a name="[73]"></a>IPS114_ClearRBox</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, user_ips114.o(.text.IPS114_ClearRBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IPS114_ClearRBox &rArr; IPS114_DrawLine &rArr; IPS114_DrawPoint &rArr; ips114_set_region &rArr; ips114_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>IPS114_DrawLine</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, user_ips114.o(.text.IPS114_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IPS114_DrawLine &rArr; IPS114_DrawPoint &rArr; ips114_set_region &rArr; ips114_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawRBox
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_ClearRBox
</UL>

<P><STRONG><a name="[75]"></a>IPS114_DrawPoint</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, user_ips114.o(.text.IPS114_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IPS114_DrawPoint &rArr; ips114_set_region &rArr; ips114_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawLine
</UL>

<P><STRONG><a name="[78]"></a>IPS114_DrawRBox</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, user_ips114.o(.text.IPS114_DrawRBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IPS114_DrawRBox &rArr; IPS114_DrawLine &rArr; IPS114_DrawPoint &rArr; ips114_set_region &rArr; ips114_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>LPTIM_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_lptim.o(.text.LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>

<P><STRONG><a name="[6e]"></a>MultiClickCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, easy_key.o(.text.MultiClickCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MultiClickCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyKeyHandler
</UL>

<P><STRONG><a name="[6f]"></a>PressCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, easy_key.o(.text.PressCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PressCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyKeyHandler
</UL>

<P><STRONG><a name="[84]"></a>RCC_EnableAHB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_EnableAHB1Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAHB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[be]"></a>RCC_EnableAPB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_EnableAPB1Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bd]"></a>RCC_EnableAPB2Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_EnableAPB2Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>

<P><STRONG><a name="[c0]"></a>RCC_ResetAPB2Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text.RCC_ResetAPB2Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_ResetAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>

<P><STRONG><a name="[bf]"></a>SPI_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_spi.o(.text.SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[79]"></a>SPI_InitMaster</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, hal_spi.o(.text.SPI_InitMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_InitMaster &rArr; SPI_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[7a]"></a>SPI_SetBaudrate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_spi.o(.text.SPI_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitMaster
</UL>

<P><STRONG><a name="[6d]"></a>SyncValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, easy_key.o(.text.SyncValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SyncValue &rArr; gpio_get_level
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyKeyHandler
</UL>

<P><STRONG><a name="[57]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, system_mm32f5277e.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SystemInit &rArr; clock_init &rArr; clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[22]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, isr.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM7_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM8_UP_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM_ClearInterruptStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_ClearInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>TIM_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_tim.o(.text.TIM_GetInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[2c]"></a>UART1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART3_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART4_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, isr.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = UART4_IRQHandler &rArr; gps_uart_callback &rArr; fifo_read_buffer &rArr; fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART5_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, isr.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART6_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, isr.o(.text.UART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART6_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART7_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART7_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>UART_ClearInterruptStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_ClearInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>UART_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c5]"></a>UART_GetData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_uart.o(.text.UART_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
</UL>

<P><STRONG><a name="[7f]"></a>UART_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text.UART_GetInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>UART_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text.UART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>

<P><STRONG><a name="[c2]"></a>UART_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, hal_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c7]"></a>UART_PutData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_PutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>

<P><STRONG><a name="[82]"></a>afio_init</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, zf_driver_gpio.o(.text.afio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1Periphs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[7c]"></a>clock_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zf_common_clock.o(.text.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clock_init &rArr; clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_freq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[83]"></a>debug_assert_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, zf_common_debug.o(.text.debug_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_global_disable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_delay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_protective_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_registers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_register
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_write_8bit_register
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_wait_ack
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_stop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_uint_to_str
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_uint
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_string
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_char
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>

<P><STRONG><a name="[8f]"></a>debug_init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, zf_common_debug.o(.text.debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = debug_init &rArr; uart_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>debug_log_handler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, zf_common_debug.o(.text.debug_log_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = debug_log_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
</UL>

<P><STRONG><a name="[91]"></a>debug_output_init</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, zf_common_debug.o(.text.debug_output_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = debug_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_debug_init
</UL>

<P><STRONG><a name="[90]"></a>debug_output_struct_init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, zf_common_debug.o(.text.debug_output_struct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = debug_output_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_debug_init
</UL>

<P><STRONG><a name="[98]"></a>fifo_clear</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, zf_common_fifo.o(.text.fifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = fifo_clear &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[99]"></a>fifo_read_buffer</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, zf_common_fifo.o(.text.fifo_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = fifo_read_buffer &rArr; fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_end_offset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[9a]"></a>fifo_used</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zf_common_fifo.o(.text.fifo_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[9d]"></a>fifo_write_buffer</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = fifo_write_buffer &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_head_offset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[8a]"></a>func_get_greatest_common_divisor</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, zf_common_function.o(.text.func_get_greatest_common_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_get_greatest_common_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_freq
</UL>

<P><STRONG><a name="[9f]"></a>func_uint_to_str</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, zf_common_function.o(.text.func_uint_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = func_uint_to_str &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_uint
</UL>

<P><STRONG><a name="[7b]"></a>gpio_get_level</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, zf_driver_gpio.o(.text.gpio_get_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_wait_ack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncValue
</UL>

<P><STRONG><a name="[72]"></a>gpio_init</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, zf_driver_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = gpio_init &rArr;  debug_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1Periphs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_protective_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyKeyInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[a0]"></a>gpio_set_level</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, zf_driver_gpio.o(.text.gpio_set_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[81]"></a>gps_uart_callback</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, zf_device_gps_tau1201.o(.text.gps_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = gps_uart_callback &rArr; fifo_read_buffer &rArr; fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>interrupt_global_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, zf_common_interrupt.o(.text.interrupt_global_disable))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[89]"></a>interrupt_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, zf_common_interrupt.o(.text.interrupt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = interrupt_init &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[51]"></a>ips114_clear</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, zf_device_ips114.o(.text.ips114_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ips114_clear &rArr; ips114_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_device_ips114.o(.text.ips114_debug_init)
</UL>
<P><STRONG><a name="[a6]"></a>ips114_init</STRONG> (Thumb, 788 bytes, Stack size 96 bytes, zf_device_ips114.o(.text.ips114_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ips114_init &rArr; spi_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_8bit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_color
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_dir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_debug_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_write_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>ips114_set_color</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, zf_device_ips114.o(.text.ips114_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ips114_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[a8]"></a>ips114_set_dir</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, zf_device_ips114.o(.text.ips114_set_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ips114_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[ae]"></a>ips114_show_char</STRONG> (Thumb, 656 bytes, Stack size 32 bytes, zf_device_ips114.o(.text.ips114_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ips114_show_char &rArr; ips114_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_string
</UL>

<P><STRONG><a name="[50]"></a>ips114_show_string</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, zf_device_ips114.o(.text.ips114_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ips114_show_string &rArr; ips114_show_char &rArr; ips114_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_uint
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_device_ips114.o(.text.ips114_debug_init)
</UL>
<P><STRONG><a name="[af]"></a>ips114_show_uint</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, zf_device_ips114.o(.text.ips114_show_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = ips114_show_uint &rArr; ips114_show_string &rArr; ips114_show_char &rArr; ips114_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_uint_to_str
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_string
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 878 bytes, Stack size 184 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = main &rArr; ips114_init &rArr; spi_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_uint
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawRBox
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_ClearRBox
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_get_acc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyKeyHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyKeyInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_string
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b1]"></a>mpu6050_get_acc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, zf_device_mpu6050.o(.text.mpu6050_get_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mpu6050_get_acc &rArr; soft_iic_read_8bit_registers &rArr; soft_iic_read_data &rArr; soft_iic_send_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_registers
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>mpu6050_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, zf_device_mpu6050.o(.text.mpu6050_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mpu6050_init &rArr; mpu6050_self1_check &rArr; soft_iic_read_8bit_register &rArr; soft_iic_read_data &rArr; soft_iic_send_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_write_8bit_register
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log_handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_self1_check
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>soft_iic_init</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, zf_driver_soft_iic.o(.text.soft_iic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = soft_iic_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
</UL>

<P><STRONG><a name="[b6]"></a>soft_iic_read_8bit_register</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, zf_driver_soft_iic.o(.text.soft_iic_read_8bit_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = soft_iic_read_8bit_register &rArr; soft_iic_read_data &rArr; soft_iic_send_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_stop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_self1_check
</UL>

<P><STRONG><a name="[b2]"></a>soft_iic_read_8bit_registers</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, zf_driver_soft_iic.o(.text.soft_iic_read_8bit_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = soft_iic_read_8bit_registers &rArr; soft_iic_read_data &rArr; soft_iic_send_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_stop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_get_acc
</UL>

<P><STRONG><a name="[b5]"></a>soft_iic_write_8bit_register</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, zf_driver_soft_iic.o(.text.soft_iic_write_8bit_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = soft_iic_write_8bit_register &rArr; soft_iic_send_data &rArr; soft_iic_wait_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_stop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_self1_check
</UL>

<P><STRONG><a name="[a7]"></a>spi_init</STRONG> (Thumb, 680 bytes, Stack size 80 bytes, zf_driver_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = spi_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitMaster
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1Periphs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[77]"></a>spi_write_16bit</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, zf_driver_spi.o(.text.spi_write_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_write_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_char
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawPoint
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>

<P><STRONG><a name="[ac]"></a>spi_write_8bit</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, zf_driver_spi.o(.text.spi_write_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_write_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_write_index
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_write_index
</UL>

<P><STRONG><a name="[aa]"></a>system_delay_ms</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, zf_driver_delay.o(.text.system_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = system_delay_ms &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetAPB2Periphs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_self1_check
</UL>

<P><STRONG><a name="[92]"></a>uart_init</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, zf_driver_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = uart_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1Periphs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
</UL>

<P><STRONG><a name="[a1]"></a>uart_query_byte</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_query_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = uart_query_byte &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[c6]"></a>uart_write_byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_write_byte &rArr; UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
</UL>

<P><STRONG><a name="[97]"></a>uart_write_string</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_str_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e1]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e3]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[95]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[e4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[87]"></a>clock_reset</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, zf_common_clock.o(.text.clock_reset))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[88]"></a>clock_set_freq</STRONG> (Thumb, 1376 bytes, Stack size 88 bytes, zf_common_clock.o(.text.clock_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_get_greatest_common_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[8c]"></a>debug_protective_handler</STRONG> (Thumb, 250 bytes, Stack size 336 bytes, zf_common_debug.o(.text.debug_protective_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = debug_protective_handler &rArr; gpio_init &rArr;  debug_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[8d]"></a>debug_output</STRONG> (Thumb, 944 bytes, Stack size 640 bytes, zf_common_debug.o(.text.debug_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[8e]"></a>debug_delay</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, zf_common_debug.o(.text.debug_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[4f]"></a>debug_uart_str_output</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, zf_common_debug.o(.text.debug_uart_str_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = debug_uart_str_output &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_common_debug.o(.text.debug_init)
</UL>
<P><STRONG><a name="[9e]"></a>fifo_head_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_head_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_head_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[9c]"></a>fifo_end_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_end_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_end_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>

<P><STRONG><a name="[a3]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, zf_common_interrupt.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
</UL>

<P><STRONG><a name="[b7]"></a>soft_iic_start</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = soft_iic_start &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_registers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_register
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_write_8bit_register
</UL>

<P><STRONG><a name="[b8]"></a>soft_iic_send_data</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = soft_iic_send_data &rArr; soft_iic_wait_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_wait_ack
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_registers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_register
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_write_8bit_register
</UL>

<P><STRONG><a name="[ba]"></a>soft_iic_stop</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = soft_iic_stop &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_registers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_register
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_write_8bit_register
</UL>

<P><STRONG><a name="[bc]"></a>soft_iic_wait_ack</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, zf_driver_soft_iic.o(.text.soft_iic_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = soft_iic_wait_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
</UL>

<P><STRONG><a name="[b9]"></a>soft_iic_read_data</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, zf_driver_soft_iic.o(.text.soft_iic_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = soft_iic_read_data &rArr; soft_iic_send_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_ack
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_registers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_register
</UL>

<P><STRONG><a name="[bb]"></a>soft_iic_send_ack</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = soft_iic_send_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
</UL>

<P><STRONG><a name="[a4]"></a>ips114_set_region</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, zf_device_ips114.o(.text.ips114_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ips114_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_write_index
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_show_char
</UL>

<P><STRONG><a name="[ab]"></a>ips114_write_index</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, zf_device_ips114.o(.text.ips114_write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ips114_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>

<P><STRONG><a name="[a5]"></a>ips114_debug_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, zf_device_ips114.o(.text.ips114_debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ips114_debug_init &rArr; debug_output_init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[b4]"></a>mpu6050_self1_check</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, zf_device_mpu6050.o(.text.mpu6050_self1_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mpu6050_self1_check &rArr; soft_iic_read_8bit_register &rArr; soft_iic_read_data &rArr; soft_iic_send_ack &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_8bit_register
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_write_8bit_register
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_init
</UL>

<P><STRONG><a name="[53]"></a>type_default_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zf_device_type.o(.text.type_default_callback))
<BR>[Address Reference Count : 4]<UL><LI> zf_device_type.o(.data.camera_uart_handler)
<LI> zf_device_type.o(.data.camera_vsync_handler)
<LI> zf_device_type.o(.data.camera_dma_handler)
<LI> zf_device_type.o(.data.wireless_module_uart_handler)
</UL>
<P><STRONG><a name="[76]"></a>ips114_set_region</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, user_ips114.o(.text.ips114_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ips114_set_region &rArr; ips114_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_write_index
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS114_DrawPoint
</UL>

<P><STRONG><a name="[ad]"></a>ips114_write_index</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, user_ips114.o(.text.ips114_write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ips114_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>

<P><STRONG><a name="[ca]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c9]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[cd]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cc]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[52]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
